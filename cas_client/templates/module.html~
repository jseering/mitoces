{% extends "index.html" %}

{% block textinfo %}

<h4>Module: {{ focusmodule }}</h4>
<p>{{ focusmodule.description }}</p>
{% if focusmodule.outcomes.count == 0 %}
<h5>Outcomes: <i>None</i></h5>
{% else %}
<h5>Outcomes:</h5>
<ul>
{% for outcome in focusmodule.outcomes %}
<li object_type="outcome">
    <a href="/outcomes/{{ outcome.id }}/" title="{{ outcome }}">{{ outcome.description }}</a>
</li>
{% endfor %}
</ul>
{% endif %}


<br>
{% if focusmodule.subjects.count == 0 %}
<h5>This module does not appear in any subjects.</h5>
{% else %}
<h5>This module appears in...</h5>
<ul>
    {% for subject in focusmodule.subjects.all %}
<li>
    <a href="/subjects/{{ subject.id }}/">{{ subject }}</a>
</li>
{% endfor %}
</ul>
{% endif %}

<br><h5>Instructors:</h5>
<ul>
{% for instructor in focusmodule.instructors.all %}
<li>
    <a href="/users/{{ instructor.id }}/">{{ instructor }}</a>
</li>
{% endfor %}
</ul>

{% if user in focusmodule.instructors.all %}
<br><button class="edit_button" onclick="location.href='/modules/{{ focusmodule.id }}/edit/';">edit module</button>
{% endif %}

{% endblock %}

{% block js %}
<script>
	var outcome_all = "{{ outcome_all }}";
	var outcome_prereqs = "{{ outcome_prereqs }}";
    var outcome_ids = "{{ outcome_ids }}";
    var outcome_colors = "{{ outcome_colors }}";
    outcome_ids = outcome_ids.substr(1,outcome_ids.length-2).split(/,/);
	var outcomes = parseString(outcome_all);
	var outcome_prereqs = parseObjects(outcome_prereqs);
    var outcome_colors = parseObjects(outcome_colors);

    var sys = arbor.ParticleSystem(800,500,0.8);
    var theUI;
    sys.parameters({gravity:true});
    sys.renderer = Renderer("#viewport");
    init();
    
    function init(){
        theUI = {"nodes":{},"edges":{}};
        for (var i=0;i<outcomes.length;i++){
            addOutcome(theUI,outcomes[i],parseInt(outcome_ids[i]),outcome_colors[i]);
            for (var j=0;j<outcome_prereqs[outcomes[i]].length;j++){
            	addEdge(theUI, outcome_prereqs[outcomes[i]][j], outcomes[i]);
            }
        }
        sys.graft(theUI);
    }

    // on link hover on text side, change color of node in graph
    $('li[object_type="outcome"]').hover(
        function() { // mouseenter
            var name = $(this).children().attr('title');
            var node = sys.getNode(name);
            sys.tweenNode(node,0.01,{color:"#0066CC"});
        }, function() { // mouseleave
            var name = $(this).children().attr('title');
            var node = sys.getNode(name);
            sys.tweenNode(node,0.01,{color:"#41A565"});
        }
    );
    
    function addOutcome(theUI,name,id,color){
        theUI["nodes"][name] = {};
        theUI["nodes"][name]["color"]=color;
        theUI["nodes"][name]["shape"]="rectangle";
        theUI["nodes"][name]["type"]="outcome";
        theUI["nodes"][name]["label"]=name;
        theUI["nodes"][name]["id"] = id;
    }

    function addEdge(theUI,from,to){
        if (theUI["edges"][from] == undefined){
            theUI["edges"][from] = {};
        }
        theUI["edges"][from][to] = {};
        theUI["edges"][from][to]["length"] = 2;
        theUI["edges"][from][to]["weight"] = 1;
        theUI["edges"][from][to]["color"] = '#000000';
        theUI["edges"][from][to]["directed"] = true;
    }
    
    function parseObjects(string) {
        string = string.replace(/u&#39;/g,'"');
        string = string.replace(/&#39;/g,'"');
        var pattern = new RegExp('u&quot;(.*?)\"(.*?)&quot;','g');
        string = string.replace(pattern,"\"$1\'$2\"");
        var object = JSON.parse(string);
        return object;
    }
    
    function parseString(string){
        string = string.replace(/u&#39;/g,'"');
        string = string.replace(/&#39;/g,'"');
        var pattern = new RegExp('u&quot;(.*?)\"(.*?)&quot;','g');
        string = string.replace(pattern,"\"$1\'$2\"");
        var list = [];
        var index = -1;
        var transcribe = false;
        for (var i=0;i<string.length;i++){
            var count = 1;
            if (string[i]=='"'){ // beginning on new list item
                if (transcribe) {
                    transcribe = false;
                } else {
                    transcribe = true;
                    index = index + 1;
                    list[index] = '';
                }
            }
            if (transcribe && string[i+1]!='"') {
                list[index] += string[i+1];
            }
        }
        return list;
    }
</script>

{% endblock %}
