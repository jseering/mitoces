{% extends "index.html" %}

{% block topnav %}

<li>
<a href="/">home</a>
</li>
<li class="active">
<a href="/explore">explore</a>
</li>
<li>
<a href="/module/add">create</a>
</li>

{% endblock %}


{% block content %}
<div class="dropdown">
{% csrf_token %}
<input class="dropdown-toggle" data-toggle="dropdown" type="text" id="exploresearch" name="search" width="400"/>

<ul class="dropdown-menu" role="menu" aria-labelledby="dLabel" id="exploresearch-results">
</ul>
</div>
<div class="btn-group" data-toggle="buttons">
  <label class="btn btn-default">
    <input type="checkbox" name="options" id="outcome_toggle" onclick="javascript:toggleOutcome()" checked> Outcomes
  </label>
  <label class="btn btn-default">
    <input type="checkbox" name="options" id="keyword_toggle" onclick="javascript:toggleKeyword()" checked> Keywords
  </label>
</div>
<canvas id="viewport" width="800" height="600" style="padding:5px"></canvas>

{% endblock %}
{% block js %}
    <script>
        $('.btn-group').button();
    </script>
    <script src="{{ STATIC_URL }}js/arbor.js"></script>
    <script src="{{ STATIC_URL }}js/arbor-tween.js"></script>
    <script src="{{ STATIC_URL }}js/arbor-graphics.js"></script>
    <script src="{{ STATIC_URL }}js/renderer.js"></script>
    
    <script>
        var module_all = "{{module_all}}";
        var module_keywords = "{{module_keywords}}";
        var module_outcomes = "{{module_outcomes}}";
        var module_name = parse(module_all);
        module_keywords = parseObjects(module_keywords);
        module_outcomes = parseObjects(module_outcomes);
        
        
        var sys = arbor.ParticleSystem(1500,800,0.5);
        var theUI;
        sys.parameters({gravity:true});
        sys.renderer = Renderer("#viewport");
        createJSON();
        
        function createJSON(){
            theUI = {"nodes":{},"edges":{}};
            for (var i=0;i<module_name.length;i++){
                addModule(theUI,module_name[i]);
                for (var n=0; n<module_outcomes[module_name[i]].length;n++) {
                    addOutcome(theUI,module_outcomes[module_name[i]][n]);
                    addEdge(theUI,module_name[i],module_outcomes[module_name[i]][n]);
                }
                for (var m=0; m<module_keywords[module_name[i]].length;m++) {
                    addKeyword(theUI,module_keywords[module_name[i]][m]);
                    addEdge(theUI,module_name[i],module_keywords[module_name[i]][m]);
                }
            }
            sys.graft(theUI);
        }
        
        function addModule(theUI,name,id){
            theUI["nodes"][name] = {};
            theUI["nodes"][name]["color"] = "#CF9238";
            theUI["nodes"][name]["shape"] = "rectangle";
            theUI["nodes"][name]["type"] = "module";
            theUI["nodes"][name]["label"] = name;
            theUI["nodes"][name]["id"] = id;
        }
        
        function addOutcome(theUI,name,id){
            theUI["nodes"][name] = {};
            theUI["nodes"][name]["color"]="#41A565";
            theUI["nodes"][name]["shape"]="rectangle";
            theUI["nodes"][name]["type"]="outcome";
            theUI["nodes"][name]["label"]=name;
            theUI["nodes"][name]["id"] = id;
        }
        
        function addKeyword(theUI,name,id){
            theUI["nodes"][name] = {};
            theUI["nodes"][name]["color"]="#416DA5";
            theUI["nodes"][name]["shape"]="rectangle";
            theUI["nodes"][name]["type"]="keyword";
            theUI["nodes"][name]["label"]=name;
            theUI["nodes"][name]["id"] = id;
        }
        
        function addEdge(theUI,from,to){
            if (theUI["edges"][from] == undefined){
                theUI["edges"][from] = {};
            }
            theUI["edges"][from][to] = {};
            theUI["edges"][from][to]["length"] = 2;
            theUI["edges"][from][to]["weight"] = 0.5;
            theUI["edges"][from][to]["color"] = '#888888';
            theUI["edges"][from][to]["directed"] = true;
        }
        
        function parseObjects(string) {
            var pattern = new RegExp('u&quot;(.*?)&#39;(.*?)&quot;');
            string = string.replace(pattern,"u&#39;$1\'$2&#39;");
            //string = string.replace(/u&#39;/g,'"');
            //string = string.replace(/&#39;/g,'"');
            console.log(string)
            var object = JSON.parse(string);
            return object;
        }
        
        function parse(string){
            var list = [];
            var index = 0;
            for (var i=0;i<string.length;i++){
                var count = 2;
                var append = '';
                if (string[i]==':'){
                    while (string[i+count] != '&'){
                        append += string[i+count];
                        count += 1;
                    }
                    list[index] = append;
                    index += 1;
                }
            }
            return list;
        }
        
        function search(node,type){
            keywordoff=false;
            outcomeoff=false;
            if (type == "module"){
                if (! node in module_name){
                    console.log("The module specified does not exist in the database.");
                }else{
                    theUI = {"nodes":{},"edges":{}};
                    addModule(theUI,node);
                    for (i in module_outcomes[node]){
                        addOutcome(theUI,module_outcomes[node][i]);
                        addEdge(theUI,node,module_outcomes[node][i]);
                    }
                    for (j in module_keywords[node]) {
                        addKeyword(theUI,module_keywords[node][j]);
                        addEdge(theUI,node,module_keywords[node][j]);
                    }
                    sys.merge(theUI);
                }
            }
            else if (type == "keyword"){
                theUI = {"nodes":{},"edges":{}};
                $.get("/explore_keyword/"+node+"/",function(data){
                    addKeyword(theUI,node);
                    var module_outcomes = data['module_outcomes'];
                    var modules = data['module_names'];
                    for (i in modules) {
                        addModule(theUI,modules[i]);
                        addEdge(theUI,node,modules[i]);
                        for (j in module_outcomes[modules[i]]) {
                            addOutcome(theUI,module_outcomes[modules[i]][j]);
                            addEdge(theUI,modules[i],module_outcomes[modules[i]][j]);
                        }
                    }
                    sys.merge(theUI);
                });
            }
            else if (type=="outcome"){
                theUI = {"nodes":{},"edges":{}};
                $.get("/explore_outcome/"+node+"/",function(data){
                    addOutcome(theUI,node);
                    var module_keywords = data['module_keywords'];
                    var modules = data['module_names'];
                    for (i in modules) {
                        addModule(theUI,modules[i]);
                        addEdge(theUI,node,modules[i]);
                        for (j in module_keywords[modules[i]]) {
                            addKeyword(theUI,module_keywords[modules[i]][j]);
                            addEdge(theUI,modules[i],module_keywords[modules[i]][j]);
                        }
                    }
                    sys.merge(theUI);
                });
            }
        }
            
        function toggleKeyword() {
            if ($('#keyword_toggle:checked').length == 0) {
               toggleoffKeyword();
            } else {
               toggleonKeyword();
            }
        }
            
        function toggleoffKeyword(){
            for (node in theUI['nodes']) {
                if (theUI['nodes'][node]['type']=='keyword') {
                    sys.pruneNode(node);
                }
            }
        }
        
        function toggleonKeyword() {
            for (node in theUI['nodes']) {
                if (theUI['nodes'][node]['type']=='module') {
                    keywords = module_keywords[node];
                    for (keyword in keywords) {
                        addKeyword(theUI,keywords[keyword]);
                        addEdge(theUI,node,keywords[keyword])
                    }
                }
            }
            sys.merge(theUI);
        }
        
        function toggleOutcome() {
            if ($('#outcome_toggle:checked').length == 0) {
               toggleoffOutcome();
            } else {
               toggleonOutcome();
            }
        }
        
        
        
        function toggleoffOutcome(){
            for (node in theUI['nodes']) {
                if (theUI['nodes'][node]['type']=='outcome') {
                    sys.pruneNode(node);
                }
            }
        }
        
        function toggleonOutcome() {
            for (node in theUI['nodes']) {
                if (theUI['nodes'][node]['type']=='module') {
                    outcomes = module_outcomes[node];
                    for (outcome in outcomes) {
                        addOutcome(theUI,outcomes[outcome]);
                        addEdge(theUI,node,outcomes[outcome])
                    }
                }
            }
            sys.merge(theUI);
        }
    </script>
{% endblock %}
