<!DOCTYPE html>
	<head>
		<title>MIToces</title>
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
		<style>
		body {
			padding-top: 60px;
		}
		@media (max-width: 979px) {
			body {
				padding-top: 0px;
			}
		}
		.container {
			overflow: visible !important
		}
		</style>
        <link rel="icon" type="image/png" href="{{ STATIC_URL }}img/favicon.png">
		<link href="{{ STATIC_URL }}css/bootstrap.min.css" rel="stylesheet" media="screen">
		<link href="{{ STATIC_URL }}css/bootstrap-responsive.css" rel="stylesheet">
        <link href="{{ STATIC_URL }}css/bootstrap-adjustments.css" rel="stylesheet">
        {% block header %}
        {% endblock %}
	</head>
	<body>
		<div class="navbar navbar-inverse navbar-fixed-top">
			<div class="navbar-inner">
                    <div class="nav-collapse collapse">
						<ul class="nav">
							<li class="dropdown">
		                        <a class="dropdown-toggle" href="#" data-toggle="dropdown">Departments<b class="caret"></b></a>
						            <ul class="dropdown-menu scroll-menu">
                                        <li>
                                            <a link_type="new" object_type="department" style="cursor:pointer;">New Department</a>
                                        </li>
                                        {% for department in departments %}
							            <li>
								            <a href="/departments/{{ department.id }}/">{{ department }}</a>
							            </li>
                                        {% endfor %}
						            </ul>
							</li>
                            <li class="dropdown">
		                        <a class="dropdown-toggle" href="#" data-toggle="dropdown">Subjects<b class="caret"></b></a>
						            <ul class="dropdown-menu scroll-menu">
                                        <li>
                                            <a link_type="new" object_type="subject" style="cursor:pointer;">New Subject</a>
                                        </li>
                                        {% for subject in subjects %}
							            <li>
								            <a href="/subjects/{{ subject.id }}/">{{ subject }}</a>
							            </li>
                                        {% endfor %}
						            </ul>
							</li>
                            <li class="dropdown">
		                        <a class="dropdown-toggle" href="#" data-toggle="dropdown">Modules<b class="caret"></b></a>
						            <ul class="dropdown-menu scroll-menu">
                                        <li>
                                            <a link_type="new" object_type="module" style="cursor:pointer;">New Module</a>
                                        </li>
                                        {% for module in modules %}
							            <li>
								            <a href="/modules/{{ module.id }}/">{{ module }}</a>
							            </li>
                                        {% endfor %}
						            </ul>
							</li>
							<li class="dropdown">
								<a href="#" class="dropdown-toggle" data-toggle="dropdown">{{user}}<b class="caret"></b></a>
							        <ul class="dropdown-menu">
                                        <li>
									        <a href="/users/{{ user.id }}/">Profile</a>
								        </li>
								        <li>
									        <a href="/cas_test/logout/">Logout</a>
								        </li>
							        </ul>
							</li>
						</ul>
					</div>
			</div>
		</div>
		<div class="container">

			<div class="textinfo">
                {% block textinfo %}

                <h4>Module: {{ focusmodule }}</h4>
<p>{{ focusmodule.description }}</p>
{% if focusmodule.outcomes.count == 0 %}
<h5>Outcomes: <i>None</i></h5>
{% else %}
<h5>Outcomes:</h5>
<ul>
{% for outcome in focusmodule.outcomes %}
<li>
    <a href="/outcomes/{{ outcome.id }}/" title="{{ outcome }}">{{ outcome.description }}</a>
</li>
{% endfor %}
</ul>
{% endif %}


<br>
{% if focusmodule.subjects.count == 0 %}
<h5>This module does not appear in any subjects.</h5>
{% else %}
<h5>This module appears in...</h5>
<ul>
    {% for subject in focusmodule.subjects.all %}
<li>
    <a href="/subjects/{{ subject.id }}/">{{ subject }}</a>
</li>
{% endfor %}
</ul>
{% endif %}

<br><h5>Instructors:</h5>
<ul>
{% for instructor in focusmodule.instructors.all %}
<li>
    <a href="/users/{{ instructor.id }}/">{{ instructor }}</a>
</li>
{% endfor %}
</ul>

{% if user in focusmodule.instructors.all %}
<br><button class="edit_button" onclick="location.href='/modules/{{ focusmodule.id }}/edit/';">edit module</button>
{% endif %}


                {% endblock %}
            </div>
			
                <canvas id="viewport" width_percent="70" style="padding:10px;"></canvas>

		</div>
	    <script src="{{ STATIC_URL }}js/jquery-2.0.3.min.js"></script>
	    <script src="{{ STATIC_URL }}js/bootstrap.min.js"></script>
        <script src="{{ STATIC_URL }}js/arbor.js"></script>
        <script src="{{ STATIC_URL }}js/arbor-graphic.js"></script>
        <script src="{{ STATIC_URL }}js/arbor-tween.js"></script>
        <script src="{{ STATIC_URL }}js/renderer.js"></script>
        <script src="{{ STATIC_URL }}js/new_object.js"></script>
        <script src="{{ STATIC_URL }}js/set_canvas_size.js"></script>
        {% block js %}
<script>
	var outcome_all = "{{ outcome_all }}";
	var outcome_prereqs = "{{ outcome_prereqs }}";
    console.log("outcome_all = " + outcome_all);
	var outcomes = parseString(outcome_all);
	var outcome_prereqs = parseObjects(outcome_prereqs);

    var sys = arbor.ParticleSystem(500,500,0.8);
    var theUI;
    sys.parameters({gravity:true});
    sys.renderer = Renderer("#viewport");
    init();
    
    function init(){
        theUI = {"nodes":{},"edges":{}};
        console.log("here1");
        for (var i=0;i<outcomes.length;i++){
            addOutcome(theUI,outcomes[i]);
            console.log(outcomes[i])
            for (var j=0;j<outcome_prereqs[outcomes[i]].length;j++){
            	addOutcomePrereq(theUI, outcome_prereqs[outcomes[i]][j]);
            	addEdge(theUI, outcome_prereqs[outcomes[i]][j], outcomes[i]);
            }
        }
        sys.graft(theUI);
    }
    
    function addModule(theUI,name,id){
        theUI["nodes"][name] = {};
        theUI["nodes"][name]["color"] = "#CF9238";
        theUI["nodes"][name]["shape"] = "rectangle";
        theUI["nodes"][name]["type"] = "module";
        theUI["nodes"][name]["label"] = name;
        theUI["nodes"][name]["id"] = id;
    }
    
    function addOutcome(theUI,name,id){
        theUI["nodes"][name] = {};
        theUI["nodes"][name]["color"]="#41A565";
        theUI["nodes"][name]["shape"]="rectangle";
        theUI["nodes"][name]["type"]="outcome";
        theUI["nodes"][name]["label"]=name;
        theUI["nodes"][name]["id"] = id;
    }

    function addOutcomePrereq(theUI,name,id){
    	theUI["nodes"][name] = {};
        theUI["nodes"][name]["color"]="#41A565";
        theUI["nodes"][name]["shape"]="rectangle";
        theUI["nodes"][name]["type"]="outcome";
        theUI["nodes"][name]["label"]=name;
    }
    
    function addKeyword(theUI,name,id){
        theUI["nodes"][name] = {};
        theUI["nodes"][name]["color"]="#416DA5";
        theUI["nodes"][name]["shape"]="rectangle";
        theUI["nodes"][name]["type"]="keyword";
        theUI["nodes"][name]["label"]=name;
        theUI["nodes"][name]["id"] = id;
    }
    
    function addEdge(theUI,from,to){
        if (theUI["edges"][from] == undefined){
            theUI["edges"][from] = {};
        }
        theUI["edges"][from][to] = {};
        theUI["edges"][from][to]["length"] = 2;
        theUI["edges"][from][to]["weight"] = 0.5;
        theUI["edges"][from][to]["color"] = '#888888';
        theUI["edges"][from][to]["directed"] = true;
    }
    
    function parseObjects(string) {
        string = string.replace(/u&#39;/g,'"');
        string = string.replace(/&#39;/g,'"');
        var pattern = new RegExp('u&quot;(.*?)\"(.*?)&quot;','g');
        string = string.replace(pattern,"\"$1\'$2\"");
        console.log(string);
        var object = JSON.parse(string);
        return object;
    }
    
    function parseString(string){
        string = string.replace(/u&#39;/g,'"');
        string = string.replace(/&#39;/g,'"');
        var pattern = new RegExp('u&quot;(.*?)\"(.*?)&quot;','g');
        string = string.replace(pattern,"\"$1\'$2\"");
        console.log("string in parse = " + string);
        var list = [];
        var index = -1;
        var transcribe = false;
        for (var i=0;i<string.length;i++){
            var count = 1;
            if (string[i]=='"'){ // beginning on new list item
                if (transcribe) {
                    transcribe = false;
                    console.log("set transcribe to false");
                    console.log(list[index])
                } else {
                    transcribe = true;
                    console.log("set transcribe to true");
                    index = index + 1;
                    list[index] = '';
                }
            }
            if (transcribe && string[i+1]!='"') {
                list[index] += string[i+1];
            }
        }
        return list;
    }
</script>
        {% endblock %}
	</body>
</html>
